// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsMessages(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsMessages(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsMessages(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashMessages(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashMessages(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashMessages(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

/// Generic class that matches all possible events from the native DownloadCallback interface.
///
/// Generated class from Pigeon that represents data sent in messages.
/// This protocol should not be extended by any user class outside of the generated file.
protocol DownloadCallbackEvent {

}

/// Generated class from Pigeon that represents data sent in messages.
struct OnDownloadProgressChangedEvent: DownloadCallbackEvent {
  var current: Int64
  var total: Int64
  var timestamp: Int64
  var remoteId: String
  var path: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> OnDownloadProgressChangedEvent? {
    let current = pigeonVar_list[0] as! Int64
    let total = pigeonVar_list[1] as! Int64
    let timestamp = pigeonVar_list[2] as! Int64
    let remoteId = pigeonVar_list[3] as! String
    let path = pigeonVar_list[4] as! String

    return OnDownloadProgressChangedEvent(
      current: current,
      total: total,
      timestamp: timestamp,
      remoteId: remoteId,
      path: path
    )
  }
  func toList() -> [Any?] {
    return [
      current,
      total,
      timestamp,
      remoteId,
      path,
    ]
  }
  static func == (lhs: OnDownloadProgressChangedEvent, rhs: OnDownloadProgressChangedEvent) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OnDownloadFailedEvent: DownloadCallbackEvent {
  var cause: String? = nil
  var remoteId: String
  var path: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> OnDownloadFailedEvent? {
    let cause: String? = nilOrValue(pigeonVar_list[0])
    let remoteId = pigeonVar_list[1] as! String
    let path = pigeonVar_list[2] as! String

    return OnDownloadFailedEvent(
      cause: cause,
      remoteId: remoteId,
      path: path
    )
  }
  func toList() -> [Any?] {
    return [
      cause,
      remoteId,
      path,
    ]
  }
  static func == (lhs: OnDownloadFailedEvent, rhs: OnDownloadFailedEvent) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OnDownloadCancelledEvent: DownloadCallbackEvent {
  var remoteId: String
  /// Needed to track the event source coming through a single stream.
  var path: String


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> OnDownloadCancelledEvent? {
    let remoteId = pigeonVar_list[0] as! String
    let path = pigeonVar_list[1] as! String

    return OnDownloadCancelledEvent(
      remoteId: remoteId,
      path: path
    )
  }
  func toList() -> [Any?] {
    return [
      remoteId,
      path,
    ]
  }
  static func == (lhs: OnDownloadCancelledEvent, rhs: OnDownloadCancelledEvent) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OnDownloadCompletedEvent: DownloadCallbackEvent {
  var remoteId: String
  /// Needed to track the event source coming through a single stream.
  var path: String
  /// The raw bytes of the file.
  var bytes: FlutterStandardTypedData


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> OnDownloadCompletedEvent? {
    let remoteId = pigeonVar_list[0] as! String
    let path = pigeonVar_list[1] as! String
    let bytes = pigeonVar_list[2] as! FlutterStandardTypedData

    return OnDownloadCompletedEvent(
      remoteId: remoteId,
      path: path,
      bytes: bytes
    )
  }
  func toList() -> [Any?] {
    return [
      remoteId,
      path,
      bytes,
    ]
  }
  static func == (lhs: OnDownloadCompletedEvent, rhs: OnDownloadCompletedEvent) -> Bool {
    return deepEqualsMessages(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashMessages(value: toList(), hasher: &hasher)
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return OnDownloadProgressChangedEvent.fromList(self.readValue() as! [Any?])
    case 130:
      return OnDownloadFailedEvent.fromList(self.readValue() as! [Any?])
    case 131:
      return OnDownloadCancelledEvent.fromList(self.readValue() as! [Any?])
    case 132:
      return OnDownloadCompletedEvent.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? OnDownloadProgressChangedEvent {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? OnDownloadFailedEvent {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? OnDownloadCancelledEvent {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? OnDownloadCompletedEvent {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}

var messagesPigeonMethodCodec = FlutterStandardMethodCodec(readerWriter: MessagesPigeonCodecReaderWriter());



private class PigeonStreamHandler<ReturnType>: NSObject, FlutterStreamHandler {
  private let wrapper: PigeonEventChannelWrapper<ReturnType>
  private var pigeonSink: PigeonEventSink<ReturnType>? = nil

  init(wrapper: PigeonEventChannelWrapper<ReturnType>) {
    self.wrapper = wrapper
  }

  func onListen(withArguments arguments: Any?, eventSink events: @escaping FlutterEventSink)
    -> FlutterError?
  {
    pigeonSink = PigeonEventSink<ReturnType>(events)
    wrapper.onListen(withArguments: arguments, sink: pigeonSink!)
    return nil
  }

  func onCancel(withArguments arguments: Any?) -> FlutterError? {
    pigeonSink = nil
    wrapper.onCancel(withArguments: arguments)
    return nil
  }
}

class PigeonEventChannelWrapper<ReturnType> {
  func onListen(withArguments arguments: Any?, sink: PigeonEventSink<ReturnType>) {}
  func onCancel(withArguments arguments: Any?) {}
}

class PigeonEventSink<ReturnType> {
  private let sink: FlutterEventSink

  init(_ sink: @escaping FlutterEventSink) {
    self.sink = sink
  }

  func success(_ value: ReturnType) {
    sink(value)
  }

  func error(code: String, message: String?, details: Any?) {
    sink(FlutterError(code: code, message: message, details: details))
  }

  func endOfStream() {
    sink(FlutterEndOfEventStream)
  }

}

class GetFileDownloadEventsStreamHandler: PigeonEventChannelWrapper<DownloadCallbackEvent> {
  static func register(with messenger: FlutterBinaryMessenger,
                      instanceName: String = "",
                      streamHandler: GetFileDownloadEventsStreamHandler) {
    var channelName = "dev.flutter.pigeon.mcumgr_flutter.FsManagerEvents.getFileDownloadEvents"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = PigeonStreamHandler<DownloadCallbackEvent>(wrapper: streamHandler)
    let channel = FlutterEventChannel(name: channelName, binaryMessenger: messenger, codec: messagesPigeonMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}
      
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FsManagerApi {
  /// Starts the download of a single file with a specific device.
  /// Additional calls to a device that has an ongoing download causes a [PlatformException]
  /// to be thrown.
  func download(remoteId: String, path: String) throws
  /// Pause an ongoing download
  func pauseTransfer(remoteId: String) throws
  /// Resume an ongoing download
  func continueTransfer(remoteId: String) throws
  /// Cancel an ongoing download
  func cancelTransfer(remoteId: String) throws
  func status(remoteId: String, path: String, completion: @escaping (Result<Int64, Error>) -> Void)
  /// Kill the FsManager instance on the native platform.
  func kill(remoteId: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FsManagerApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `FsManagerApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FsManagerApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Starts the download of a single file with a specific device.
    /// Additional calls to a device that has an ongoing download causes a [PlatformException]
    /// to be thrown.
    let downloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.download\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      downloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let remoteIdArg = args[0] as! String
        let pathArg = args[1] as! String
        do {
          try api.download(remoteId: remoteIdArg, path: pathArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      downloadChannel.setMessageHandler(nil)
    }
    /// Pause an ongoing download
    let pauseTransferChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.pauseTransfer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseTransferChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let remoteIdArg = args[0] as! String
        do {
          try api.pauseTransfer(remoteId: remoteIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseTransferChannel.setMessageHandler(nil)
    }
    /// Resume an ongoing download
    let continueTransferChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.continueTransfer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      continueTransferChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let remoteIdArg = args[0] as! String
        do {
          try api.continueTransfer(remoteId: remoteIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      continueTransferChannel.setMessageHandler(nil)
    }
    /// Cancel an ongoing download
    let cancelTransferChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.cancelTransfer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cancelTransferChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let remoteIdArg = args[0] as! String
        do {
          try api.cancelTransfer(remoteId: remoteIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      cancelTransferChannel.setMessageHandler(nil)
    }
    let statusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.status\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      statusChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let remoteIdArg = args[0] as! String
        let pathArg = args[1] as! String
        api.status(remoteId: remoteIdArg, path: pathArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      statusChannel.setMessageHandler(nil)
    }
    /// Kill the FsManager instance on the native platform.
    let killChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.kill\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      killChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let remoteIdArg = args[0] as! String
        do {
          try api.kill(remoteId: remoteIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      killChannel.setMessageHandler(nil)
    }
  }
}
