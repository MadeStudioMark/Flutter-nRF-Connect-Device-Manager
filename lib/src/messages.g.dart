// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


/// Generic class that matches all possible events from the native DownloadCallback interface.
sealed class DownloadCallbackEvent {
}

class OnDownloadProgressChangedEvent extends DownloadCallbackEvent {
  OnDownloadProgressChangedEvent({
    required this.current,
    required this.total,
    required this.timestamp,
    required this.remoteId,
    required this.path,
  });

  int current;

  int total;

  int timestamp;

  String remoteId;

  String path;

  List<Object?> _toList() {
    return <Object?>[
      current,
      total,
      timestamp,
      remoteId,
      path,
    ];
  }

  Object encode() {
    return _toList();  }

  static OnDownloadProgressChangedEvent decode(Object result) {
    result as List<Object?>;
    return OnDownloadProgressChangedEvent(
      current: result[0]! as int,
      total: result[1]! as int,
      timestamp: result[2]! as int,
      remoteId: result[3]! as String,
      path: result[4]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! OnDownloadProgressChangedEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class OnDownloadFailedEvent extends DownloadCallbackEvent {
  OnDownloadFailedEvent({
    this.cause,
    required this.remoteId,
    required this.path,
  });

  String? cause;

  String remoteId;

  String path;

  List<Object?> _toList() {
    return <Object?>[
      cause,
      remoteId,
      path,
    ];
  }

  Object encode() {
    return _toList();  }

  static OnDownloadFailedEvent decode(Object result) {
    result as List<Object?>;
    return OnDownloadFailedEvent(
      cause: result[0] as String?,
      remoteId: result[1]! as String,
      path: result[2]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! OnDownloadFailedEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class OnDownloadCancelledEvent extends DownloadCallbackEvent {
  OnDownloadCancelledEvent({
    required this.remoteId,
    required this.path,
  });

  String remoteId;

  /// Needed to track the event source coming through a single stream.
  String path;

  List<Object?> _toList() {
    return <Object?>[
      remoteId,
      path,
    ];
  }

  Object encode() {
    return _toList();  }

  static OnDownloadCancelledEvent decode(Object result) {
    result as List<Object?>;
    return OnDownloadCancelledEvent(
      remoteId: result[0]! as String,
      path: result[1]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! OnDownloadCancelledEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class OnDownloadCompletedEvent extends DownloadCallbackEvent {
  OnDownloadCompletedEvent({
    required this.remoteId,
    required this.path,
    required this.bytes,
  });

  String remoteId;

  /// Needed to track the event source coming through a single stream.
  String path;

  /// The raw bytes of the file.
  Uint8List bytes;

  List<Object?> _toList() {
    return <Object?>[
      remoteId,
      path,
      bytes,
    ];
  }

  Object encode() {
    return _toList();  }

  static OnDownloadCompletedEvent decode(Object result) {
    result as List<Object?>;
    return OnDownloadCompletedEvent(
      remoteId: result[0]! as String,
      path: result[1]! as String,
      bytes: result[2]! as Uint8List,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! OnDownloadCompletedEvent || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is OnDownloadProgressChangedEvent) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is OnDownloadFailedEvent) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is OnDownloadCancelledEvent) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is OnDownloadCompletedEvent) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return OnDownloadProgressChangedEvent.decode(readValue(buffer)!);
      case 130: 
        return OnDownloadFailedEvent.decode(readValue(buffer)!);
      case 131: 
        return OnDownloadCancelledEvent.decode(readValue(buffer)!);
      case 132: 
        return OnDownloadCompletedEvent.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const StandardMethodCodec pigeonMethodCodec = StandardMethodCodec(_PigeonCodec());

Stream<DownloadCallbackEvent> getFileDownloadEvents( {String instanceName = ''}) {
  if (instanceName.isNotEmpty) {
    instanceName = '.$instanceName';
  }
  final EventChannel getFileDownloadEventsChannel =
      EventChannel('dev.flutter.pigeon.mcumgr_flutter.FsManagerEvents.getFileDownloadEvents$instanceName', pigeonMethodCodec);
  return getFileDownloadEventsChannel.receiveBroadcastStream().map((dynamic event) {
    return event as DownloadCallbackEvent;
  });
}
    

class FsManagerApi {
  /// Constructor for [FsManagerApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FsManagerApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Starts the download of a single file with a specific device.
  /// Additional calls to a device that has an ongoing download causes a [PlatformException]
  /// to be thrown.
  Future<void> download(String remoteId, String path) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.download$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[remoteId, path]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Pause an ongoing download
  Future<void> pauseTransfer(String remoteId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.pauseTransfer$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[remoteId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Resume an ongoing download
  Future<void> continueTransfer(String remoteId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.continueTransfer$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[remoteId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Cancel an ongoing download
  Future<void> cancelTransfer(String remoteId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.cancelTransfer$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[remoteId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> status(String remoteId, String path) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.status$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[remoteId, path]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  /// Kill the FsManager instance on the native platform.
  Future<void> kill(String remoteId) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.kill$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[remoteId]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
