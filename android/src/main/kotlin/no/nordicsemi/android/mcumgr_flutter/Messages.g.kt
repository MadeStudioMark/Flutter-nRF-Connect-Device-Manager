// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package no.nordicsemi.android.mcumgr_flutter

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object MessagesPigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * Generic class that matches all possible events from the native DownloadCallback interface.
 *
 * Generated class from Pigeon that represents data sent in messages.
 * This class should not be extended by any user class outside of the generated file.
 */
sealed class DownloadCallbackEvent 
/** Generated class from Pigeon that represents data sent in messages. */
data class OnDownloadProgressChangedEvent (
  val current: Long,
  val total: Long,
  val timestamp: Long,
  val remoteId: String,
  val path: String
) : DownloadCallbackEvent()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): OnDownloadProgressChangedEvent {
      val current = pigeonVar_list[0] as Long
      val total = pigeonVar_list[1] as Long
      val timestamp = pigeonVar_list[2] as Long
      val remoteId = pigeonVar_list[3] as String
      val path = pigeonVar_list[4] as String
      return OnDownloadProgressChangedEvent(current, total, timestamp, remoteId, path)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      current,
      total,
      timestamp,
      remoteId,
      path,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is OnDownloadProgressChangedEvent) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OnDownloadFailedEvent (
  val cause: String? = null,
  val remoteId: String,
  val path: String
) : DownloadCallbackEvent()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): OnDownloadFailedEvent {
      val cause = pigeonVar_list[0] as String?
      val remoteId = pigeonVar_list[1] as String
      val path = pigeonVar_list[2] as String
      return OnDownloadFailedEvent(cause, remoteId, path)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      cause,
      remoteId,
      path,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is OnDownloadFailedEvent) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OnDownloadCancelledEvent (
  val remoteId: String,
  /** Needed to track the event source coming through a single stream. */
  val path: String
) : DownloadCallbackEvent()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): OnDownloadCancelledEvent {
      val remoteId = pigeonVar_list[0] as String
      val path = pigeonVar_list[1] as String
      return OnDownloadCancelledEvent(remoteId, path)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      remoteId,
      path,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is OnDownloadCancelledEvent) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OnDownloadCompletedEvent (
  val remoteId: String,
  /** Needed to track the event source coming through a single stream. */
  val path: String,
  /** The raw bytes of the file. */
  val bytes: ByteArray
) : DownloadCallbackEvent()
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): OnDownloadCompletedEvent {
      val remoteId = pigeonVar_list[0] as String
      val path = pigeonVar_list[1] as String
      val bytes = pigeonVar_list[2] as ByteArray
      return OnDownloadCompletedEvent(remoteId, path, bytes)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      remoteId,
      path,
      bytes,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is OnDownloadCompletedEvent) {
      return false
    }
    if (this === other) {
      return true
    }
    return MessagesPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class MessagesPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OnDownloadProgressChangedEvent.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OnDownloadFailedEvent.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OnDownloadCancelledEvent.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OnDownloadCompletedEvent.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is OnDownloadProgressChangedEvent -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is OnDownloadFailedEvent -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is OnDownloadCancelledEvent -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is OnDownloadCompletedEvent -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

val MessagesPigeonMethodCodec = StandardMethodCodec(MessagesPigeonCodec())



private class MessagesPigeonStreamHandler<T>(
    val wrapper: MessagesPigeonEventChannelWrapper<T>
) : EventChannel.StreamHandler {
  var pigeonSink: PigeonEventSink<T>? = null

  override fun onListen(p0: Any?, sink: EventChannel.EventSink) {
    pigeonSink = PigeonEventSink<T>(sink)
    wrapper.onListen(p0, pigeonSink!!)
  }

  override fun onCancel(p0: Any?) {
    pigeonSink = null
    wrapper.onCancel(p0)
  }
}

interface MessagesPigeonEventChannelWrapper<T> {
  open fun onListen(p0: Any?, sink: PigeonEventSink<T>) {}

  open fun onCancel(p0: Any?) {}
}

class PigeonEventSink<T>(private val sink: EventChannel.EventSink) {
  fun success(value: T) {
    sink.success(value)
  }

  fun error(errorCode: String, errorMessage: String?, errorDetails: Any?) {
    sink.error(errorCode, errorMessage, errorDetails)
  }

  fun endOfStream() {
    sink.endOfStream()
  }
}
      
abstract class GetFileDownloadEventsStreamHandler : MessagesPigeonEventChannelWrapper<DownloadCallbackEvent> {
  companion object {
    fun register(messenger: BinaryMessenger, streamHandler: GetFileDownloadEventsStreamHandler, instanceName: String = "") {
      var channelName: String = "dev.flutter.pigeon.mcumgr_flutter.FsManagerEvents.getFileDownloadEvents"
      if (instanceName.isNotEmpty()) {
        channelName += ".$instanceName"
      }
      val internalStreamHandler = MessagesPigeonStreamHandler<DownloadCallbackEvent>(streamHandler)
      EventChannel(messenger, channelName, MessagesPigeonMethodCodec).setStreamHandler(internalStreamHandler)
    }
  }
}
      
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FsManagerApi {
  /**
   * Starts the download of a single file with a specific device.
   * Additional calls to a device that has an ongoing download causes a [PlatformException]
   * to be thrown.
   */
  fun download(remoteId: String, path: String)
  /** Pause an ongoing download */
  fun pauseTransfer(remoteId: String)
  /** Resume an ongoing download */
  fun continueTransfer(remoteId: String)
  /** Cancel an ongoing download */
  fun cancelTransfer(remoteId: String)
  fun status(remoteId: String, path: String, callback: (Result<Long>) -> Unit)
  /** Kill the FsManager instance on the native platform. */
  fun kill(remoteId: String)

  companion object {
    /** The codec used by FsManagerApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `FsManagerApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FsManagerApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.download$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val remoteIdArg = args[0] as String
            val pathArg = args[1] as String
            val wrapped: List<Any?> = try {
              api.download(remoteIdArg, pathArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.pauseTransfer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val remoteIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.pauseTransfer(remoteIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.continueTransfer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val remoteIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.continueTransfer(remoteIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.cancelTransfer$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val remoteIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.cancelTransfer(remoteIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.status$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val remoteIdArg = args[0] as String
            val pathArg = args[1] as String
            api.status(remoteIdArg, pathArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(MessagesPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(MessagesPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mcumgr_flutter.FsManagerApi.kill$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val remoteIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.kill(remoteIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              MessagesPigeonUtils.wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
